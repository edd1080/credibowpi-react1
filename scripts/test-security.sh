#!/bin/bash\n\n# Security & Performance Test Runner\n# This script runs comprehensive security and performance tests for the Bowpi Authentication System\n\nset -e\n\n# Colors for output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m' # No Color\n\n# Function to print colored output\nprint_status() {\n    echo -e \"${BLUE}[INFO]${NC} $1\"\n}\n\nprint_success() {\n    echo -e \"${GREEN}[SUCCESS]${NC} $1\"\n}\n\nprint_warning() {\n    echo -e \"${YELLOW}[WARNING]${NC} $1\"\n}\n\nprint_error() {\n    echo -e \"${RED}[ERROR]${NC} $1\"\n}\n\n# Function to run test with error handling\nrun_test() {\n    local test_name=\"$1\"\n    local test_command=\"$2\"\n    \n    print_status \"Running $test_name...\"\n    \n    if eval \"$test_command\"; then\n        print_success \"$test_name completed successfully\"\n        return 0\n    else\n        print_error \"$test_name failed\"\n        return 1\n    fi\n}\n\n# Main execution\nmain() {\n    print_status \"Starting Security & Performance Test Suite\"\n    print_status \"=======================================\"\n    \n    local failed_tests=0\n    local total_tests=0\n    \n    # Check if we're in the right directory\n    if [ ! -f \"package.json\" ]; then\n        print_error \"Please run this script from the project root directory\"\n        exit 1\n    fi\n    \n    # Check if node_modules exists\n    if [ ! -d \"node_modules\" ]; then\n        print_warning \"node_modules not found. Installing dependencies...\"\n        npm install\n    fi\n    \n    # Parse command line arguments\n    case \"${1:-all}\" in\n        \"security\")\n            print_status \"Running Security Tests Only\"\n            \n            # Token Security Tests\n            ((total_tests++))\n            if ! run_test \"Token Security Tests\" \"npm run test:security:tokens\"; then\n                ((failed_tests++))\n            fi\n            \n            # Authentication Security Tests\n            ((total_tests++))\n            if ! run_test \"Authentication Security Tests\" \"npm run test:security:auth\"; then\n                ((failed_tests++))\n            fi\n            \n            # Header Security Tests\n            ((total_tests++))\n            if ! run_test \"Header Security Tests\" \"npm run test:security:headers\"; then\n                ((failed_tests++))\n            fi\n            ;;\n            \n        \"performance\")\n            print_status \"Running Performance Tests Only\"\n            \n            # Authentication Performance Tests\n            ((total_tests++))\n            if ! run_test \"Authentication Performance Tests\" \"npm run test:performance\"; then\n                ((failed_tests++))\n            fi\n            \n            # Load Testing\n            ((total_tests++))\n            if ! run_test \"Load Testing\" \"npm run test:load\"; then\n                ((failed_tests++))\n            fi\n            ;;\n            \n        \"load\")\n            print_status \"Running Load Tests Only\"\n            \n            # Load Testing\n            ((total_tests++))\n            if ! run_test \"Load Testing\" \"npm run test:load\"; then\n                ((failed_tests++))\n            fi\n            ;;\n            \n        \"coverage\")\n            print_status \"Running All Tests with Coverage\"\n            \n            ((total_tests++))\n            if ! run_test \"Security & Performance Tests with Coverage\" \"npm run test:security-performance\"; then\n                ((failed_tests++))\n            fi\n            ;;\n            \n        \"all\"|*)\n            print_status \"Running All Security & Performance Tests\"\n            \n            # Token Security Tests\n            ((total_tests++))\n            if ! run_test \"Token Security Tests\" \"npm run test:security:tokens\"; then\n                ((failed_tests++))\n            fi\n            \n            # Authentication Security Tests\n            ((total_tests++))\n            if ! run_test \"Authentication Security Tests\" \"npm run test:security:auth\"; then\n                ((failed_tests++))\n            fi\n            \n            # Header Security Tests\n            ((total_tests++))\n            if ! run_test \"Header Security Tests\" \"npm run test:security:headers\"; then\n                ((failed_tests++))\n            fi\n            \n            # Authentication Performance Tests\n            ((total_tests++))\n            if ! run_test \"Authentication Performance Tests\" \"npm run test:performance\"; then\n                ((failed_tests++))\n            fi\n            \n            # Load Testing\n            ((total_tests++))\n            if ! run_test \"Load Testing\" \"npm run test:load\"; then\n                ((failed_tests++))\n            fi\n            ;;\n    esac\n    \n    # Summary\n    print_status \"=======================================\"\n    print_status \"Test Suite Summary\"\n    print_status \"=======================================\"\n    \n    local passed_tests=$((total_tests - failed_tests))\n    \n    if [ $failed_tests -eq 0 ]; then\n        print_success \"All $total_tests tests passed! ðŸŽ‰\"\n        print_success \"Security and performance validation completed successfully\"\n    else\n        print_error \"$failed_tests out of $total_tests tests failed\"\n        print_success \"$passed_tests out of $total_tests tests passed\"\n        \n        if [ $failed_tests -gt 0 ]; then\n            print_warning \"Please review the failed tests and fix any issues\"\n            exit 1\n        fi\n    fi\n    \n    # Performance recommendations\n    print_status \"=======================================\"\n    print_status \"Performance Recommendations\"\n    print_status \"=======================================\"\n    print_status \"â€¢ Monitor authentication response times in production\"\n    print_status \"â€¢ Set up alerts for performance degradation\"\n    print_status \"â€¢ Regularly run load tests before releases\"\n    print_status \"â€¢ Review security logs for suspicious activity\"\n    \n    # Security recommendations\n    print_status \"=======================================\"\n    print_status \"Security Recommendations\"\n    print_status \"=======================================\"\n    print_status \"â€¢ Regularly update security test cases\"\n    print_status \"â€¢ Monitor for new attack vectors\"\n    print_status \"â€¢ Review authentication logs regularly\"\n    print_status \"â€¢ Keep security dependencies updated\"\n}\n\n# Help function\nshow_help() {\n    echo \"Security & Performance Test Runner\"\n    echo \"\"\n    echo \"Usage: $0 [OPTION]\"\n    echo \"\"\n    echo \"Options:\"\n    echo \"  all         Run all security and performance tests (default)\"\n    echo \"  security    Run only security tests\"\n    echo \"  performance Run only performance tests\"\n    echo \"  load        Run only load tests\"\n    echo \"  coverage    Run all tests with coverage report\"\n    echo \"  help        Show this help message\"\n    echo \"\"\n    echo \"Examples:\"\n    echo \"  $0                    # Run all tests\"\n    echo \"  $0 security          # Run only security tests\"\n    echo \"  $0 performance       # Run only performance tests\"\n    echo \"  $0 coverage          # Run all tests with coverage\"\n}\n\n# Check for help flag\nif [ \"$1\" = \"help\" ] || [ \"$1\" = \"-h\" ] || [ \"$1\" = \"--help\" ]; then\n    show_help\n    exit 0\nfi\n\n# Run main function\nmain \"$@\""